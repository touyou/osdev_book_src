diff --git a/boot.S b/boot.S
index 11aa1b5..fa753ac 100644
--- a/boot.S
+++ b/boot.S
@@ -94,6 +94,24 @@ entry:
   movl %eax, (%edi)
   movl $0, 4(%edi)
 
+  movl $(pdpt1+8), %edi
+  movl $0x40000000, %eax
+  orl  $(PDPTE_PRESENT_BIT | PDPTE_WRITE_BIT | PDPTE_USER_BIT | PDPTE_1GPAGE_BIT), %eax
+  movl %eax, (%edi)
+  movl $0, 4(%edi)
+
+  movl $(pdpt1+16), %edi
+  movl $0x80000000, %eax
+  orl  $(PDPTE_PRESENT_BIT | PDPTE_WRITE_BIT | PDPTE_USER_BIT | PDPTE_1GPAGE_BIT), %eax
+  movl %eax, (%edi)
+  movl $0, 4(%edi)
+
+  movl $(pdpt1+24), %edi
+  movl $0xc0000000, %eax
+  orl  $(PDPTE_PRESENT_BIT | PDPTE_WRITE_BIT | PDPTE_USER_BIT | PDPTE_1GPAGE_BIT), %eax
+  movl %eax, (%edi)
+  movl $0, 4(%edi)
+
   // ページテーブルの構築はここまで
 
   // PAE&PGEビットを立てる
diff --git a/common.h b/common.h
index 378a346..fc86bc6 100644
--- a/common.h
+++ b/common.h
@@ -16,6 +16,12 @@ typedef __UINT32_TYPE__ uint32_t;
 typedef __INT64_TYPE__ int64_t;
 typedef __UINT64_TYPE__ uint64_t;
 
+typedef __builtin_va_list va_list;
+
+#define va_start(v,l)   __builtin_va_start(v,l)
+#define va_end(v)       __builtin_va_end(v)
+#define va_arg(v,l)     __builtin_va_arg(v,l)
+
 void panic();
 
 enum ReturnCode {
@@ -23,4 +29,6 @@ enum ReturnCode {
   ERROR,
 };
 
+uint8_t font[128][8];
+
 #define NULL ((void *)0)
diff --git a/framebuffer.c b/framebuffer.c
index 4c60ecc..253c36b 100644
--- a/framebuffer.c
+++ b/framebuffer.c
@@ -17,14 +17,54 @@ void framebuffer_init(struct multiboot_tag_framebuffer_common *tag) {
   framebuffer_tag = tag;
 }
 
+uint64_t framebuffer_ntimesput(uint64_t *hpet_addr) {
+  unsigned char *p = (unsigned char *)framebuffer_tag->framebuffer_addr;
+  uint64_t start = *(hpet_addr);
+  for (int i=0; i<4096; ++i) p[0] = 1;
+  uint64_t end = *(hpet_addr);
+  return (end - start) / 4096;
+}
+
+#define MARGIN 4
+
 // char文字の描画
-static void framebuffer_putc() {
+static void framebuffer_putc(char c) {
   // TODO
-}
+  uint32_t width = framebuffer_tag->framebuffer_width;
+  uint32_t height = framebuffer_tag->framebuffer_height;
+  uint8_t bpp = framebuffer_tag->framebuffer_bpp / 8;
+  unsigned char *p = (unsigned char *)framebuffer_tag->framebuffer_addr;
 
-// 以下のコードはxv6より引用
-// https://pdos.csail.mit.edu/6.828/2016/xv6.html
+  static int x = MARGIN;
+  static int y = MARGIN;
+
+  if (c == '\n') {
+    x = MARGIN;
+    y += 8 + MARGIN;
+  } else {
+    for (int i=0; i<8; ++i) {
+      for (int j=0; j<8; ++j) {
+        int npos = (i+y) * bpp * width + (j+x) * bpp;
+        if (font[c][i]>>(7-j)&1) {
+            p[npos] = 0x00;
+            p[npos+1] = 0xff;
+            p[npos+2] = 0x00;
+        } else {
+            p[npos] = 0x00;
+            p[npos+1] = 0x00;
+            p[npos+2] = 0x00;
+        }
+      }
+    }
+    x+= 8 + MARGIN;
+    if (x >= width-MARGIN) {
+        x = MARGIN;
+        y += 8 + MARGIN;
+    }
+  }
+}
 
+// https://github.com/swetland/xv6 より引用
 /* The xv6 software is: */
 
 /* Copyright (c) 2006-2009 Frans Kaashoek, Robert Morris, Russ Cox, */
@@ -49,79 +89,83 @@ static void framebuffer_putc() {
 /* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION */
 /* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */
 
+static char digits[] = "0123456789abcdef";
+
 static void
-framebuffer_printint(int xx, int base, int sgn)
+framebuffer_printptr(uint64_t x) {
+  int i;
+  for (i = 0; i < (sizeof(uint64_t) * 2); i++, x <<= 4)
+    framebuffer_putc(digits[x >> (sizeof(uint64_t) * 8 - 4)]);
+}
+
+static void
+framebuffer_printint(int xx, int base, int sign)
 {
-  static char digits[] = "0123456789ABCDEF";
   char buf[16];
-  int i, neg;
+  int i;
   uint32_t x;
 
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
+  if(sign && (sign = xx < 0))
     x = -xx;
-  } else {
+  else
     x = xx;
-  }
 
   i = 0;
   do{
     buf[i++] = digits[x % base];
   }while((x /= base) != 0);
-  if(neg)
+
+  if(sign)
     buf[i++] = '-';
 
   while(--i >= 0)
     framebuffer_putc(buf[i]);
 }
 
-// Print to the given fd. Only understands %d, %x, %p, %s.
 void
 framebuffer_printf(char *fmt, ...)
 {
+  va_list ap;
+  int i, c;
   char *s;
-  int c, i, state;
-  void *ap;
-
-  state = 0;
-  ap = (void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
-      } else {
-        framebuffer_putc(c);
-      }
-    } else if(state == '%'){
-      if(c == 'd'){
-        framebuffer_printint(*(uint32_t *)ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
-        framebuffer_printint(*(uint32_t *)ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
-        s = (char*)*(uint64_t *)ap;
-        ap++;
-        if(s == 0)
-          s = "(null)";
-        while(*s != 0){
-          framebuffer_putc(*s);
-          s++;
-        }
-      } else if(c == 'c'){
-        framebuffer_putc(*(char *)ap);
-        ap++;
-      } else if(c == '%'){
-        framebuffer_putc(c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        framebuffer_putc('%');
-        framebuffer_putc(c);
-      }
-      state = 0;
+
+  va_start(ap, fmt);
+
+  if (fmt == 0)
+    panic("null fmt");
+
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+    if(c != '%'){
+      framebuffer_putc(c);
+      continue;
+    }
+    c = fmt[++i] & 0xff;
+    if(c == 0)
+      break;
+    switch(c){
+    case 'd':
+      framebuffer_printint(va_arg(ap, int), 10, 1);
+      break;
+    case 'x':
+      framebuffer_printint(va_arg(ap, int), 16, 0);
+      break;
+    case 'p':
+      framebuffer_printptr(va_arg(ap, uint64_t));
+      break;
+    case 's':
+      if((s = va_arg(ap, char*)) == 0)
+        s = "(null)";
+      for(; *s; s++)
+        framebuffer_putc(*s);
+      break;
+    case '%':
+      framebuffer_putc('%');
+      break;
+    default:
+      // Print unknown % sequence to draw attention.
+      framebuffer_putc('%');
+      framebuffer_putc(c);
+      break;
     }
   }
 }
-
diff --git a/framebuffer.h b/framebuffer.h
index 68991ce..b553006 100644
--- a/framebuffer.h
+++ b/framebuffer.h
@@ -7,7 +7,9 @@
 
 #pragma once
 
+#include "common.h"
 #include "multiboot2.h"
 
 void framebuffer_init(struct multiboot_tag_framebuffer_common *tag);
+uint64_t framebuffer_ntimesput(uint64_t *hpet_addr);
 void framebuffer_printf(char *fmt, ...);
diff --git a/main.c b/main.c
index d5e05d0..914973a 100644
--- a/main.c
+++ b/main.c
@@ -12,6 +12,39 @@
 
 uint32_t multiboot_info;
 
+uint64_t get_nanosec() {
+  struct hpet_descriptor *hp = acpi_get_hpet_desc();
+  uint64_t addr = hp->address;
+  *((uint64_t *)(addr+0x10)) |= 1;
+  uint32_t ccp = *((uint32_t *)(addr + 4));
+  uint64_t mcv = *((uint64_t *)(addr + 0xf0));
+  // 三回MMIOを行っているので3で割っている
+  return ccp * mcv / 1000000 / 3;
+}
+
+void cost_exec() {
+  // HPET 取得コスト
+  uint64_t sec_arr[101];
+  uint64_t sum = 0;
+  for(int i=0; i<101; ++i) {
+    sec_arr[i] = get_nanosec();
+    if (i != 0) sum += sec_arr[i] - sec_arr[i-1];
+  }
+  uint64_t d_sum = 0;
+  for(int i=1; i<101; ++i) {
+    d_sum += (sec_arr[i]-sec_arr[i-1]-sum/100)*(sec_arr[i]-sec_arr[i-1]-sum/100);
+  }
+  framebuffer_printf("ave. %d disp. %d", sum / 100, d_sum / 100);
+
+  // DMAコスト
+  struct hpet_descriptor *hp = acpi_get_hpet_desc();
+  uint64_t addr = hp->address;
+  *((uint64_t *)(addr+0x10)) |= 1;
+  uint32_t ccp = *((uint32_t *)(addr + 4));
+  uint64_t res = framebuffer_ntimesput((uint64_t *)(addr + 0xf0));
+  framebuffer_printf(" dma. %d nsec\n", ccp*res/1000000);
+}
+
 void cmain() {
   // TODO check multiboot2 magic number
 
@@ -45,7 +78,8 @@ void cmain() {
   }
   
   // TODO ここにコードを追加
-
+  for (int i=0; i<10; i++) cost_exec();
+  
   while(1) {
     __asm__ volatile("hlt;");
   }
